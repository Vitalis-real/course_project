@charset "UTF-8";
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
html{
  line-height:1.15;
  -webkit-text-size-adjust:100%;
}
body{
  margin:0;
}
main{
  display:block;
}
h1{
  font-size:2em;
  margin:0.67em 0;
}
hr{
  box-sizing:content-box;
  height:0;
  overflow:visible;
}
pre{
  font-family:monospace, monospace;
  font-size:1em;
}
a{
  background-color:transparent;
}
abbr[title]{
  border-bottom:none;
  text-decoration:underline;
  text-decoration:underline dotted;
}
b,
strong{
  font-weight:bolder;
}
code,
kbd,
samp{
  font-family:monospace, monospace;
  font-size:1em;
}
small{
  font-size:80%;
}
sub,
sup{
  font-size:75%;
  line-height:0;
  position:relative;
  vertical-align:baseline;
}

sub{
  bottom:-0.25em;
}

sup{
  top:-0.5em;
}
img{
  border-style:none;
}
button,
input,
optgroup,
select,
textarea{
  font-family:inherit;
  font-size:100%;
  line-height:1.15;
  margin:0;
}
button,
input{
  overflow:visible;
}
button,
select{
  text-transform:none;
}
button,
[type=button],
[type=reset],
[type=submit]{
  -webkit-appearance:button;
}
button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner{
  border-style:none;
  padding:0;
}
button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring{
  outline:1px dotted ButtonText;
}
fieldset{
  padding:0.35em 0.75em 0.625em;
}
legend{
  box-sizing:border-box;
  color:inherit;
  display:table;
  max-width:100%;
  padding:0;
  white-space:normal;
}
progress{
  vertical-align:baseline;
}
textarea{
  overflow:auto;
}
[type=checkbox],
[type=radio]{
  box-sizing:border-box;
  padding:0;
}
[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button{
  height:auto;
}
[type=search]{
  -webkit-appearance:textfield;
  outline-offset:-2px;
}
[type=search]::-webkit-search-decoration{
  -webkit-appearance:none;
}
::-webkit-file-upload-button{
  -webkit-appearance:button;
  font:inherit;
}
details{
  display:block;
}
summary{
  display:list-item;
}
template{
  display:none;
}
[hidden]{
  display:none;
}

.header-menu__container, .header-content__container{
  max-width:1340px;
  margin-right:auto;
  margin-left:auto;
  padding-right:20px;
  padding-left:20px;
}
*,
*::before,
*::after{
  box-sizing:border-box;
}

html{
  overflow-y:scroll;
  font-family:"Roboto", sans-serif;
  font-size:16px;
}

h1{
  font-family:"Roboto Slab", serif;
  font-size:3.75rem;
  letter-spacing:0.08em;
  font-weight:300;
  line-height:1.2em;
}

h2{
  font-family:"Roboto Slab", serif;
}

a{
  text-decoration:none;
  color:#ffffff;
}

.btn{
  border-width:2px;
  border-style:solid;
  padding:0.5em 1em;
  display:flex;
  align-items:center;
  justify-content:center;
  font-size:1.125rem;
  letter-spacing:0.1em;
  transition:background-color 0.5s;
}
.btn:hover, .btn:focus{
  background-color:#d66926;
}
.btn--light{
  background-color:rgba(255, 255, 255, 0.1);
  border-color:#ffffff;
  width:250px;
  height:60px;
}
.btn--primary{
  background-color:rgba(45, 54, 81, 0.8);
  border-color:#2d3651;
  width:350px;
  height:60px;
}

.visually-hidden{
  position:absolute;
  overflow:hidden;
  clip:rect(0 0 0 0);
  width:1px;
  height:1px;
  margin:-1px;
  padding:0;
  border:0;
}

header{
  position:relative;
  min-height:100vh;
  background-color:#2d3651;
  background-image:url(../img/img-header.png);
  background-position:50% 50%;
  background-size:cover;
  color:#ffffff;
  display:grid;
  align-content:center;
  padding:150px 0;
}

.header-content{
  position:relative;
  z-index:1;
}
.header-content__title{
  margin:0 0 53px 0;
  text-align:center;
}
.header-content__actions{
  display:flex;
  justify-content:center;
  gap:20px;
}

.header-menu{
  position:absolute;
  z-index:2;
  left:0;
  top:0;
  right:0;
}
.header-menu__container{
  display:grid;
  gap:20px;
  grid-template-columns:auto 1fr;
  align-items:center;
}

.header-logo{
  font-size:1.5rem;
  letter-spacing:0.22em;
}
.header-logo__link{
  display:block;
  padding:20px 20px 20px 0;
}
.header-logo__accent{
  display:inline-block;
  border:3px solid #d53d27;
  padding:14px 1px 13px 5px;
  margin-right:4px;
}

.header-navbar{
  display:grid;
  justify-items:end;
}
.header-navbar__btn{
  display:none;
}
.header-navbar__list{
  margin:0 -10px 0 0;
  padding:0;
  list-style:none;
  display:grid;
  gap:20px;
  width:100%;
  grid-template-columns:repeat(auto-fit, minmax(30px, max-content));
  justify-content:end;
}
.header-navbar__link{
  display:block;
  padding:20px 10px;
  font-size:1.125rem;
  letter-spacing:0.1em;
  transition:color 0.25s;
}
.header-navbar__link:hover, .header-navbar__link:focus{
  color:#d66926;
}

.header-overlay{
  background-color:#2d3651;
  opacity:0.8;
  position:absolute;
  top:0;
  right:0;
  bottom:0;
  left:0;
}
.skills{
  padding:10px;
}
.skills__container{
  display:grid;
  gap:10px;
  grid-template-columns:repeat(4, 1fr);
  grid-auto-rows:calc(33.33333vh - 13.3333333333px);
  grid-template-areas:"a1 a1 a2 a3" "a4 a5 a5 a6" "a7 a8 a9 a6";
  margin-bottom:20px;
}
.skills__actions{
  display:flex;
  justify-content:center;
  margin-bottom:30px;
}

.skill-item{
  position:relative;
  overflow:hidden;
}
.skill-item__title{
  position:absolute;
  top:0;
  right:0;
  bottom:0;
  left:0;
  z-index:1;
  margin:0;
  font-size:1.25rem;
  letter-spacing:0.1em;
}
.skill-item__link{
  padding:20px;
  display:flex;
  align-items:center;
  justify-content:center;
  height:100%;
  transition:color 0.5;
}
.skill-item__image{
  background-color:#2d3651;
  position:absolute;
  top:0;
  right:0;
  bottom:0;
  left:0;
  background-size:cover;
  background-position:50% 50%;
  transition:transform 0.5s;
}
.skill-item__overlay{
  background-color:#2d3651;
  position:absolute;
  top:0;
  right:0;
  bottom:0;
  left:0;
  opacity:0.8;
  transition:opacity 0.5s;
}
.skill-item:hover .skill-item__overlay{
  opacity:0.95;
}
.skill-item:hover .skill-item__image{
  transform:scale(1.1);
}
.skill-item:hover .skill-item__link{
  color:#d66926;
}

.skill-item:nth-of-type(1){
  grid-area:a1;
}

.skill-item:nth-of-type(2){
  grid-area:a2;
}

.skill-item:nth-of-type(3){
  grid-area:a3;
}

.skill-item:nth-of-type(4){
  grid-area:a4;
}

.skill-item:nth-of-type(5){
  grid-area:a5;
}

.skill-item:nth-of-type(6){
  grid-area:a6;
}

.skill-item:nth-of-type(7){
  grid-area:a7;
}

.skill-item:nth-of-type(8){
  grid-area:a8;
}

.skill-item:nth-of-type(9){
  grid-area:a9;
}

@media (max-width: 992px){
  .btn--light{
    font-size:16px;
    width:200px;
    height:50px;
  }
  .skills__container{
    grid-template-columns:repeat(3, 1fr);
    grid-template-areas:"a1 a1 a2" "a3 a4 a4" "a5 a5 a6" "a7 a8 a6" "a7 a9 a9";
  }
}

@media (max-width: 768px){
  .btn--light{
    width:170px;
    height:40px;
  }
  .skills__container{
    grid-template-columns:repeat(2, 1fr);
    grid-template-areas:"a1 a2" "a3 a2" "a4 a4" "a5 a6" "a5 a7" "a8 a9";
  }
}

@media (max-height: 690px){
  .skills__container{
    grid-auto-rows:216.666667px;
  }
}

@media (max-width: 576px){
  .skills__container{
    grid-template-columns:1fr;
    grid-template-areas:"a1" "a2" "a3" "a4" "a5" "a6" "a7" "a8" "a9";
  }
}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */